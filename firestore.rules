rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função auxiliar para verificar se o usuário está autenticado via Firebase Auth
    // Como usamos CPF + senha customizada, vamos verificar pela existência do documento do usuário
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função para obter dados do usuário logado
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Função para verificar se o usuário pertence ao mesmo município
    function sameMunicipality(resourceData) {
      return getUserData().municipio == resourceData.municipio;
    }
    
    // Função para verificar papel/role do usuário
    function hasRole(role) {
      return getUserData().role == role;
    }
    
    // Função para verificar se tem um dos papéis especificados
    function hasAnyRole(roles) {
      return getUserData().role in roles;
    }
    
    // Regras para coleção de usuários
    match /users/{userId} {
      // Usuários podem ler apenas seus próprios dados
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Apenas admins podem criar/atualizar usuários
      allow create, update: if isAuthenticated() && hasRole('admin');
      
      // Usuários não podem alterar seu próprio role
      allow update: if isAuthenticated() && 
                   request.auth.uid == userId && 
                   !('role' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Ninguém pode deletar usuários
      allow delete: if false;
    }
    
    // Regras para coleção de pacientes
    match /pacientes/{pacienteId} {
      // Usuários podem ler pacientes do mesmo município
      allow read: if isAuthenticated() && sameMunicipality(resource.data);
      
      // Agentes, coordenadores, gerentes e admins podem criar pacientes
      allow create: if isAuthenticated() && 
                   hasAnyRole(['agente', 'coordenador', 'gerente', 'admin']) &&
                   request.resource.data.municipio == getUserData().municipio;
      
      // Apenas coordenadores, gerentes e admins podem atualizar
      allow update: if isAuthenticated() && 
                   hasAnyRole(['coordenador', 'gerente', 'admin']) &&
                   sameMunicipality(resource.data);
      
      // Apenas admins podem deletar pacientes
      allow delete: if isAuthenticated() && hasRole('admin');
    }
    
    // Regras para coleção de avaliações
    match /avaliacoes/{avaliacaoId} {
      // Usuários podem ler avaliações do mesmo município
      allow read: if isAuthenticated() && sameMunicipality(resource.data);
      
      // Agentes podem criar avaliações
      allow create: if isAuthenticated() && 
                   hasAnyRole(['agente', 'coordenador', 'gerente', 'admin']) &&
                   request.resource.data.municipio == getUserData().municipio &&
                   request.resource.data.profissional == getUserData().cpf;
      
      // Coordenadores, gerentes e admins podem atualizar (aprovar/rejeitar)
      allow update: if isAuthenticated() && 
                   hasAnyRole(['coordenador', 'gerente', 'admin']) &&
                   sameMunicipality(resource.data);
      
      // Profissionais podem atualizar suas próprias avaliações (apenas se status = pendente)
      allow update: if isAuthenticated() && 
                   resource.data.profissional == getUserData().cpf &&
                   resource.data.status == 'pendente';
      
      // Apenas admins podem deletar avaliações
      allow delete: if isAuthenticated() && hasRole('admin');
    }
    
    // Regras para outras coleções (caso necessário no futuro)
    match /{document=**} {
      // Por padrão, negar acesso a qualquer outra coleção
      allow read, write: if false;
    }
  }
}